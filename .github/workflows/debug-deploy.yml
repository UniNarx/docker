name: Debug Docker Deploy

on:
  workflow_dispatch: # Позволяет запускать вручную

jobs:
  debug-run:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx (optional, good for caching if building)
        uses: docker/setup-buildx-action@v2

      - name: Create .env file for Docker Compose
        run: |
          echo "MONGODB_URI_COMPOSE=${{ secrets.MONGODB_URI_COMPOSE }}" > .env
          echo "JWT_SECRET_COMPOSE=${{ secrets.JWT_SECRET_COMPOSE }}" >> .env
          echo "SUPERADMIN_USERNAME_COMPOSE=${{ secrets.SUPERADMIN_USERNAME_COMPOSE_DEBUG }}" >> .env # Используйте отдельные секреты для дебага если нужно
          echo "SUPERADMIN_PASSWORD_COMPOSE=${{ secrets.SUPERADMIN_PASSWORD_COMPOSE_DEBUG }}" >> .env
          echo "FRONTEND_URL_COMPOSE=http://localhost:3000" >> .env
          # Для NEXT_PUBLIC_API_BASE в frontend/next.config.ts, если оно используется напрямую в API клиенте:
          # Если ваш api.ts использует относительный путь '/api', то NEXT_PUBLIC_API_BASE_COMPOSE для docker-compose не так критичен для клиентских вызовов
          # но может быть важен для серверной части Next.js, если она читает process.env.NEXT_PUBLIC_API_BASE
          echo "NEXT_PUBLIC_API_BASE=http://localhost:3000/api" >> .env # Или http://uninarx-docker-5dda.twc1.net/api если нужно тестировать с конкретным URL
          echo "UPLOADTHING_SECRET_COMPOSE=${{ secrets.UPLOADTHING_SECRET_COMPOSE }}" >> .env
          echo "UPLOADTHING_APP_ID_COMPOSE=${{ secrets.UPLOADTHING_APP_ID_COMPOSE }}" >> .env
        env:
          MONGODB_URI_COMPOSE: ${{ secrets.MONGODB_URI_COMPOSE }}
          JWT_SECRET_COMPOSE: ${{ secrets.JWT_SECRET_COMPOSE }}
          SUPERADMIN_USERNAME_COMPOSE_DEBUG: ${{ secrets.SUPERADMIN_USERNAME_COMPOSE_DEBUG }} # Пример
          SUPERADMIN_PASSWORD_COMPOSE_DEBUG: ${{ secrets.SUPERADMIN_PASSWORD_COMPOSE_DEBUG }} # Пример
          UPLOADTHING_SECRET_COMPOSE: ${{ secrets.UPLOADTHING_SECRET_COMPOSE }}
          UPLOADTHING_APP_ID_COMPOSE: ${{ secrets.UPLOADTHING_APP_ID_COMPOSE }}


      - name: Login to Docker Hub (if using private base images or pushing)
        if: ${{ false }} # Установите в true и добавьте docker/login-action@v2 если нужно
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Если вы используете опубликованные образы, убедитесь, что docker-compose.yml их использует
      # Если нужно собирать:
      # - name: Build Docker images
      #   run: docker-compose -f docker-compose.yml build

      - name: Start services
        run: docker-compose -f docker-compose.yml up -d backend frontend

      - name: Wait for services
        run: |
          echo "Waiting for services to initialize..."
          sleep 45 # Увеличьте если нужно больше времени на старт БД и приложений

      - name: Check running containers
        run: docker ps -a

      - name: Test API - Get Doctors
        run: |
          echo "Fetching doctors list..."
          curl -v http://localhost:3000/api/doctors || echo "Curl failed for /api/doctors"
          # `-v` для подробного вывода, `|| echo ...` чтобы шаг не падал если curl не 0

      - name: Test API - Login
        run: |
          echo "Attempting login..."
          # Используйте актуальные тестовые данные
          curl -v -X POST -H "Content-Type: application/json" \
               -d '{"username":"${{ secrets.TEST_USER_LOGIN }}", "password":"${{ secrets.TEST_USER_PASSWORD }}"}' \
               http://localhost:3000/api/auth/login || echo "Curl failed for /api/auth/login"
        env:
          TEST_USER_LOGIN: ${{ secrets.TEST_USER_LOGIN }} # Добавьте эти секреты
          TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}

      - name: Display Docker logs
        if: always()
        run: |
          echo "--- Docker Compose Logs ---"
          docker-compose -f docker-compose.yml logs --tail="200" backend
          docker-compose -f docker-compose.yml logs --tail="200" frontend

      - name: Stop services
        if: always()
        run: docker-compose -f docker-compose.yml down
